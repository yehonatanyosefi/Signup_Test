{"version":3,"file":"static/js/939.a6f74dc2.chunk.js","mappings":"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","sources":["cmps/Pose.jsx","views/Yoga.jsx"],"sourcesContent":["import { useState, useMemo, useRef, useEffect } from 'react'\r\nimport * as ml5 from 'ml5'\r\nimport Sketch from 'react-p5'\r\n\r\nconst PUBLIC_URL = process.env.PUBLIC_URL\r\nconst poses = [\r\n\t{ pose: 'Mountain', imgSrc: `${PUBLIC_URL}/imgs/mountain.svg` },\r\n\t{ pose: 'Tree', imgSrc: `${PUBLIC_URL}/imgs/tree.svg` },\r\n\t{ pose: 'Downward Dog', imgSrc: `${PUBLIC_URL}/imgs/dog.svg` },\r\n\t{ pose: 'Warrior I', imgSrc: `${PUBLIC_URL}/imgs/warrior1.svg` },\r\n\t{ pose: 'Warrior II', imgSrc: `${PUBLIC_URL}/imgs/warrior2.svg` },\r\n\t{ pose: 'Chair', imgSrc: `${PUBLIC_URL}/imgs/chair.svg` },\r\n]\r\nconst POSES_INTERVAL = 100\r\nconst POSES_TIME = 10 * 1000\r\nconst TOTAL_POSES_CHECKS = POSES_TIME / POSES_INTERVAL\r\nconst POSES_TO_DO_DEMO = Array(TOTAL_POSES_CHECKS)\r\n\t.fill()\r\n\t.map(() => 'Mountain')\r\n\r\nconst Pose = () => {\r\n\tconst [pose, setPose] = useState(null)\r\n\tconst [skeleton, setSkeleton] = useState(null)\r\n\tconst [video, setVideo] = useState(null)\r\n\tconst [posesToDo, setPosesToDo] = useState([])\r\n\tconst [posesTime, setPosesTime] = useState(POSES_TIME)\r\n\tconst [currMessage, setCurrMessage] = useState('')\r\n\tconst [isModelLoaded, setIsYogaLoaded] = useState(false)\r\n\tconst [isPoseNetLoaded, setIsPoseNetLoaded] = useState(false)\r\n\tconst [currPose, setCurrPose] = useState('')\r\n\tconst [gamePhase, setGamePhase] = useState('loading')\r\n\tconst [timerId, setTimerId] = useState(null)\r\n\r\n\tconst posesArray = useRef([])\r\n\tconst isGameOn = useRef(false)\r\n\tconst brainRef = useRef(null)\r\n\r\n\tconst disabledBtn = useMemo(\r\n\t\t() => !isPoseNetLoaded || !isModelLoaded || gamePhase === 'Ended',\r\n\t\t[isPoseNetLoaded, isModelLoaded, gamePhase]\r\n\t)\r\n\tconst btnTxt = useMemo(() => {\r\n\t\tif (!isPoseNetLoaded || !isModelLoaded) return 'Loading...'\r\n\t\tif (gamePhase === 'teaching') return 'Start Teaching'\r\n\t\treturn 'Start Game'\r\n\t}, [isPoseNetLoaded, isModelLoaded, posesToDo.length, gamePhase])\r\n\r\n\tconst handlePosesSetup = () => {\r\n\t\tsetPosesToDo(posesArray.current)\r\n\t\tposesArray.current = []\r\n\t\tsetCurrMessage(`Let's start, you need to repeat the last video`)\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tsetGamePhase('teaching')\r\n\t}, [])\r\n\r\n\tconst handleStart = () => {\r\n\t\tif (!isPoseNetLoaded || !isModelLoaded) return setCurrMessage('Still Loading...')\r\n\t\tconsole.log(gamePhase)\r\n\t\tif (gamePhase === 'teaching') {\r\n\t\t\t// If we're in the 'teaching' phase, transition to 'testing'\r\n\t\t\tsetCurrMessage(`Let's start, you have 10 seconds to do any pose you like`)\r\n\t\t\tsetGamePhase('testing')\r\n\t\t\tclassifyPose()\r\n\t\t} else if (gamePhase === 'testing') {\r\n\t\t\t// If we're in the 'testing' phase, start the game\r\n\t\t\tisGameOn.current = true\r\n\t\t\tsetCurrMessage(`Game started! You have 10 seconds to repeat the poses`)\r\n\t\t\tsetGamePhase('Started')\r\n\t\t\tclassifyPose()\r\n\t\t}\r\n\t}\r\n\r\n\tconst setup = (p5, canvasParentRef) => {\r\n\t\tp5.createCanvas(640, 480).parent(canvasParentRef)\r\n\t\tlet video = p5.createCapture(p5.VIDEO)\r\n\t\tvideo.hide()\r\n\t\tsetVideo(video)\r\n\r\n\t\tlet poseNet = ml5.poseNet(video, onModelLoad)\r\n\t\tposeNet.on('pose', (poses) => {\r\n\t\t\tif (poses.length > 0) {\r\n\t\t\t\tsetPose(poses[0].pose)\r\n\t\t\t\tsetSkeleton(poses[0].skeleton)\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tlet options = {\r\n\t\t\tinputs: 34,\r\n\t\t\toutputs: 6,\r\n\t\t\ttask: 'classification',\r\n\t\t\tdebug: true,\r\n\t\t}\r\n\r\n\t\tbrainRef.current = ml5.neuralNetwork(options)\r\n\t\tconst modelInfo = {\r\n\t\t\tmodel: '/models/model2.json',\r\n\t\t\tmetadata: '/models/model_meta2.json',\r\n\t\t\tweights: '/models/model.weights2.bin',\r\n\t\t}\r\n\t\tbrainRef.current.load(modelInfo, onYogaLoad)\r\n\t}\r\n\r\n\tconst draw = (p5) => {\r\n\t\t//NO useState here\r\n\t\tp5.background(0)\r\n\t\tp5.push()\r\n\t\tp5.translate(video.width, 0)\r\n\t\tp5.scale(-1, 1)\r\n\t\tp5.image(video, 0, 0, video.width, video.height)\r\n\t\tif (pose) {\r\n\t\t\tfor (let i = 0; i < skeleton.length; i++) {\r\n\t\t\t\tlet a = skeleton[i][0]\r\n\t\t\t\tlet b = skeleton[i][1]\r\n\t\t\t\tp5.strokeWeight(2)\r\n\t\t\t\tp5.stroke(244, 194, 194)\r\n\t\t\t\tp5.line(a.position.x, a.position.y, b.position.x, b.position.y)\r\n\t\t\t}\r\n\t\t}\r\n\t\tp5.pop()\r\n\t}\r\n\r\n\tconst onYogaLoad = () => {\r\n\t\tsetIsYogaLoaded(true)\r\n\t}\r\n\r\n\tconst onModelLoad = () => {\r\n\t\tsetIsPoseNetLoaded(true)\r\n\t}\r\n\r\n\tconst classifyPose = () => {\r\n\t\tif (pose && skeleton.length) {\r\n\t\t\tlet inputs = []\r\n\t\t\tfor (let i = 0; i < pose.keypoints.length; i++) {\r\n\t\t\t\tlet x = pose.keypoints[i].position.x\r\n\t\t\t\tlet y = pose.keypoints[i].position.y\r\n\t\t\t\tinputs.push(x)\r\n\t\t\t\tinputs.push(y)\r\n\t\t\t}\r\n\t\t\tbrainRef.current.classify(inputs, gotResults).catch((error) => {\r\n\t\t\t\tconsole.error('Classification error:', error)\r\n\t\t\t})\r\n\t\t} else {\r\n\t\t\t// console.log('Pose not found')\r\n\t\t\tsetCurrPose('Not found')\r\n\t\t\tposesArray.current = [...posesArray.current, null]\r\n\t\t}\r\n\t\thandleGameTik()\r\n\t}\r\n\r\n\tconst handleGameTik = () => {\r\n\t\tsetPosesTime((prevPosesTime) => {\r\n\t\t\tconst newPoseTime = prevPosesTime - POSES_INTERVAL\r\n\r\n\t\t\tif (newPoseTime <= 0) {\r\n\t\t\t\tclearTimeout(timerId)\r\n\t\t\t\tif (!isGameOn.current) handlePosesSetup()\r\n\t\t\t\telse handleGameOver()\r\n\t\t\t\treturn POSES_TIME\r\n\t\t\t} else {\r\n\t\t\t\tconst newTimerId = setTimeout(classifyPose, POSES_INTERVAL)\r\n\t\t\t\tsetTimerId(newTimerId)\r\n\t\t\t\treturn newPoseTime\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\tconst handleGameOver = () => {\r\n\t\tconst successNumber = posesToDo.reduce((acc, curr, i) => {\r\n\t\t\tif (curr === posesArray.current[i]) return acc + 1\r\n\t\t\treturn acc\r\n\t\t}, 0)\r\n\t\tconst successRate = Math.round((successNumber / TOTAL_POSES_CHECKS) * 100)\r\n\t\tsetCurrMessage(`Game ended, your success rate is: ${successRate}%`)\r\n\t\tisGameOn.current = false\r\n\t\tsetGamePhase('Ended')\r\n\t}\r\n\r\n\tconst gotResults = (error, results) => {\r\n\t\tconsole.log(`results:`, results)\r\n\t\tif (error || !results) {\r\n\t\t\tposesArray.current = [...posesArray.current, null]\r\n\t\t\treturn\r\n\t\t}\r\n\t\tconst pose = results[0].label\r\n\t\tconsole.log(`pose:`, pose)\r\n\t\tsetCurrPose(pose)\r\n\t\tposesArray.current = [...posesArray.current, pose]\r\n\t\t// if (results[0].confidence < 0.7) {\r\n\t\t// \tposesArray.current = [...posesArray.current, null]\r\n\t\t// } else {\r\n\t\t// \tposesArray.current = [...posesArray.current, pose]\r\n\t\t// }\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className=\"pose-display\">\r\n\t\t\t<div className=\"pose-list\">\r\n\t\t\t\t{poses.map((pose) => (\r\n\t\t\t\t\t<div key={pose.pose} className=\"pose-item\">\r\n\t\t\t\t\t\t<img src={pose.imgSrc} className=\"pose-img\" />\r\n\t\t\t\t\t\t<div className=\"pose-name\">{pose.pose}</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t))}\r\n\t\t\t</div>\r\n\t\t\t<Sketch setup={setup} draw={draw} className=\"pose-canvas\" />\r\n\t\t\t<p className=\"message\">{currMessage}</p>\r\n\t\t\t{(isGameOn.current || gamePhase === 'testing') && <p className=\"time\">{posesTime}</p>}\r\n\t\t\t{(isGameOn.current || gamePhase === 'testing') && <p className=\"current-pose\">Pose: {currPose}</p>}\r\n\t\t\t<button\r\n\t\t\t\tonClick={handleStart}\r\n\t\t\t\tdisabled={disabledBtn}\r\n\t\t\t\tclassName={`start-button ${disabledBtn ? 'disabled' : ''}`}>\r\n\t\t\t\t{btnTxt}\r\n\t\t\t</button>\r\n\t\t\t{/* <img src={`${PUBLIC_URL}/imgs/allow.png`} className=\"instruction-img\" /> */}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Pose\r\n","import Pose from '../cmps/Pose'\r\n\r\nexport default function Yoga() {\r\n\treturn (\r\n\t\t<div className=\"yoga-app\">\r\n\t\t\t<header className=\"header\">\r\n\t\t\t\t<h1>Yoga</h1>\r\n\t\t\t</header>\r\n\t\t\t<Pose />\r\n\t\t</div>\r\n\t)\r\n}\r\n"],"names":["PUBLIC_URL","process","poses","pose","imgSrc","concat","POSES_TIME","Array","fill","map","_useState","useState","_useState2","_slicedToArray","setPose","_useState3","_useState4","skeleton","setSkeleton","_useState5","_useState6","video","setVideo","_useState7","_useState8","posesToDo","setPosesToDo","_useState9","_useState10","posesTime","setPosesTime","_useState11","_useState12","currMessage","setCurrMessage","_useState13","_useState14","isModelLoaded","setIsYogaLoaded","_useState15","_useState16","isPoseNetLoaded","setIsPoseNetLoaded","_useState17","_useState18","currPose","setCurrPose","_useState19","_useState20","gamePhase","setGamePhase","_useState21","_useState22","timerId","setTimerId","posesArray","useRef","isGameOn","brainRef","disabledBtn","useMemo","btnTxt","length","useEffect","onYogaLoad","onModelLoad","classifyPose","inputs","i","keypoints","x","position","y","push","current","classify","gotResults","catch","error","console","_toConsumableArray","handleGameTik","prevPosesTime","newPoseTime","clearTimeout","handleGameOver","newTimerId","setTimeout","successNumber","reduce","acc","curr","successRate","Math","round","results","log","label","_jsxs","className","children","_jsx","src","Sketch","setup","p5","canvasParentRef","createCanvas","parent","createCapture","VIDEO","hide","ml5","on","outputs","task","debug","load","model","metadata","weights","draw","background","translate","width","scale","image","height","a","b","strokeWeight","stroke","line","pop","onClick","disabled","Yoga","Pose"],"sourceRoot":""}